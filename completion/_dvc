#compdef dvc

# AUTOMATCALLY GENERATED by `shtab`

_shtab_dvc_options_=(
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "(- :)"{-h,--help}"[Show this help message and exit.]"
  {-V,--version}"[Show program\'s version.]:version:"
)

_shtab_dvc_commands_() {
  local _commands=(
    "add:Track data files or directories with DVC."
    "cache:Manage cache settings."
    "check-ignore:Check whether files or directories are excluded due to \`.dvcignore\`."
    "checkout:Checkout data files from cache."
    "commit:Save changed data to cache and update DVC-files."
    "completion:Prints out shell tab completion scripts."
    "config:Get or set config options."
    "dag:Visualize DVC project DAG."
    "destroy:Remove DVC-files, local DVC config and data cache."
    "diff:Show added, modified, or deleted data between commits in the DVC repository, or between a commit and the workspace."
    "exp:Commands to display and compare experiments."
    "experiments:Commands to display and compare experiments."
    "fetch:Get tracked files or directories from remote storage into the cache."
    "freeze:Freeze stages or .dvc files."
    "gc:Removes all files in the cache or a remote which are not in"
    "get:Download file or directory tracked by DVC or by Git."
    "get-url:Download or copy files from URL."
    "import:Download file or directory tracked by DVC or by Git into the workspace, and track it."
    "import-url:Download or copy file from URL and take it under DVC control."
    "init:Initialize DVC in the current directory. Expects directory"
    "install:Install DVC git hooks into the repository."
    "list:List repository contents, including files and directories tracked by DVC and by Git."
    "metrics:Commands to display and compare metrics."
    "move:Rename or move a DVC controlled data file or a directory."
    "params:Commands to display params."
    "plots:Commands to visualize and compare plot metrics in structured files (JSON, YAML, CSV, TSV)"
    "pull:Download tracked files or directories from remote storage."
    "push:Upload tracked files or directories to remote storage."
    "remote:Set up and manage data remotes."
    "remove:Remove stage entry, remove .gitignore entry and unprotect outputs"
    "repro:Reproduce complete or partial pipelines by executing their stages."
    "root:Return the relative path to the root of the DVC project."
    "run:Generate a stage file from a command and execute the command."
    "status:Show changed stages, compare local cache and a remote storage."
    "unfreeze:Unfreeze stages or .dvc files."
    "unprotect:Unprotect tracked files or directories (when hardlinks or symlinks have been enabled with \`dvc config cache.type\`)"
    "update:Update data artifacts imported from other DVC repositories."
    "version:Display the DVC version and system\/environment information."
  )

  _describe 'dvc commands' _commands
}

_shtab_dvc_add=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-R,--recursive}"[Recursively add files under directory targets.]"
  "--no-commit[Don\'t put files\/directories into cache.]"
  "--external[Allow targets that are outside of the DVC repository.]"
  "--file[Specify name of the DVC-file this command will generate.]:file:"
  "*:Input files\/directories to add.:_files"
)

_shtab_dvc_cache=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "1:Sub command:(dir)"
)

_shtab_dvc_check_ignore=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-d,--details}"[Show the exclude patterns along with each target path.]"
  {-a,--all}"[Include the target paths which don\’t match any pattern in the \`--details\` list.]"
  {-n,--non-matching}"[Include the target paths which don\’t match any pattern in the \`--details\` list.]"
  "--stdin[Read paths from standard input instead of providing \`targets\`.]"
  "*:File or directory paths to check:_files"
)

_shtab_dvc_checkout=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--summary[Show summary of the changes.]"
  {-d,--with-deps}"[Checkout all dependencies of the specified target.]"
  {-R,--recursive}"[Checkout all subdirectories of the specified directory.]"
  {-f,--force}"[Do not prompt when removing working directory files.]"
  "--relink[Recreate links or copies from cache to workspace.]"
  "*:Limit command scope to these tracked files\/directories, .dvc files, or stage names.:_files -g '(*?.dvc|Dvcfile|dvc.yaml)'"
)

_shtab_dvc_commit=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-f,--force}"[Commit even if hash value for dependencies\/outputs changed.]"
  {-d,--with-deps}"[Commit all dependencies of the specified target.]"
  {-R,--recursive}"[Commit cache for subdirectories of the specified directory.]"
  "*:DVC-files to commit. Optional. (Finds all DVC-files in the workspace by default.):_files -g '(*?.dvc|Dvcfile|dvc.yaml)'"
)

_shtab_dvc_completion=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-s,--shell}"[Shell syntax for completions.]:shell:(bash zsh)"
)

_shtab_dvc_config=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "--global[Use global config.]"
  "--system[Use system config.]"
  "--local[Use local config.]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-u,--unset}"[Unset option.]"
  ":Option name.:"
  ":Option value.:"
)

_shtab_dvc_dag=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--dot[Print DAG with .dot format.]"
  "--full[Show full DAG that the target belongs too, instead of showing DAG consisting only of ancestors.]"
  ":Stage or output to show pipeline for (optional). Finds all stages in the workspace by default.:"
)

_shtab_dvc_destroy=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-f,--force}"[Force destruction.]"
)

_shtab_dvc_diff=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--show-json[Format the output into a JSON]"
  "--show-hash[Display hash value for each entry]"
  "--show-md[Show tabulated output in the Markdown format (GFM).]"
  "--hide-missing[Hide missing cache file status.]"
  ":Old Git commit to compare (defaults to HEAD):"
  ":New Git commit to compare (defaults to the current workspace):"
)

_shtab_dvc_exp=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "1:Sub command:(show checkout diff)"
)

_shtab_dvc_experiments=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "1:Sub command:(show checkout diff)"
)

_shtab_dvc_fetch=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-j,--jobs}"[Number of jobs to run simultaneously. The default value is 4 \* cpu_count(). For SSH remotes, the default is 4. ]:jobs:"
  {-r,--remote}"[Remote storage to fetch from]:remote:"
  {-a,--all-branches}"[Fetch cache for all branches.]"
  {-T,--all-tags}"[Fetch cache for all tags.]"
  "--all-commits[Fetch cache for all commits.]"
  {-d,--with-deps}"[Fetch cache for all dependencies of the specified target.]"
  {-R,--recursive}"[Fetch cache for subdirectories of specified directory.]"
  "--run-cache[Fetch run history for all stages.]"
  "*:Limit command scope to these tracked files\/directories, .dvc files, or stage names.:_files -g '(*?.dvc|Dvcfile|dvc.yaml)'"
)

_shtab_dvc_freeze=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "*:Stages or .dvc files to freeze:_files -g '(*?.dvc|Dvcfile|dvc.yaml)'"
)

_shtab_dvc_gc=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-w,--workspace}"[Keep data files used in the current workspace.]"
  {-a,--all-branches}"[Keep data files for the tips of all Git branches.]"
  {-T,--all-tags}"[Keep data files for all Git tags.]"
  "--all-commits[Keep data files for all Git commits.]"
  {-c,--cloud}"[Collect garbage in remote repository.]"
  {-r,--remote}"[Remote storage to collect garbage in]:remote:"
  {-f,--force}"[Force garbage collection - automatically agree to all prompts.]"
  {-j,--jobs}"[Number of jobs to run simultaneously. The default value is 4 \* cpu_count(). For SSH remotes, the default is 4. ]:jobs:"
  {-p,--projects}"[Keep data files required by these projects in addition to the current one. Useful if you share a single cache across repos.]:repos:"
)

_shtab_dvc_get=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-o,--out}"[Destination path to download files to]:out:_files -/"
  "--rev[Git revision (e.g. SHA, branch, tag)]:rev:"
  "--show-url[Print the storage location (URL) the target data would be downloaded from, and exit.]"
  ":Location of DVC or Git repository to download from:"
  ":Path to a file or directory within the repository:_files"
)

_shtab_dvc_get_url=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  ":See \`dvc import-url -h\` for full list of supported URLs.:"
  ":Destination path to put data to.:_files -/"
)

_shtab_dvc_import=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-o,--out}"[Destination path to download files to]:out:_files -/"
  "--rev[Git revision (e.g. SHA, branch, tag)]:rev:"
  ":Location of DVC or Git repository to download from:"
  ":Path to a file or directory within the repository:_files"
)

_shtab_dvc_import_url=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--file[Specify name of the DVC-file this command will generate.]:file:_files -/"
  "--no-exec[Only create DVC-file without actually downloading it.]"
  ":Location of the data to download. Supported URLs\::"
  ":Destination path to put files to.:_files -/"
)

_shtab_dvc_init=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--no-scm[Initiate DVC in directory that is not tracked by any SCM tool (e.g. Git).]"
  {-f,--force}"[Overwrite existing \'.dvc\/\' directory. This operation removes local cache.]"
  "--subdir[Necessary for running this command inside a subdirectory of a parent SCM repository.]"
)

_shtab_dvc_install=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--use-pre-commit-tool[Install DVC hooks using pre-commit (https\:\/\/pre-commit.com) if it is installed.]"
)

_shtab_dvc_list=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-R,--recursive}"[Recursively list files.]"
  "--dvc-only[Show only DVC outputs.]"
  "--rev[Git revision (e.g. SHA, branch, tag)]:rev:"
  ":Location of DVC repository to list:"
  ":Path to directory within the repository to list outputs for:_files -/"
)

_shtab_dvc_metrics=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "1:Sub command:(show diff)"
)

_shtab_dvc_move=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  ":Source path to a data file or directory.:_files"
  ":Destination path.:_files"
)

_shtab_dvc_params=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "1:Sub command:(diff)"
)

_shtab_dvc_plots=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "1:Sub command:(show diff modify)"
)

_shtab_dvc_pull=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-j,--jobs}"[Number of jobs to run simultaneously. The default value is 4 \* cpu_count(). For SSH remotes, the default is 4. ]:jobs:"
  {-r,--remote}"[Remote storage to pull from]:remote:"
  {-a,--all-branches}"[Fetch cache for all branches.]"
  {-T,--all-tags}"[Fetch cache for all tags.]"
  "--all-commits[Fetch cache for all commits.]"
  {-f,--force}"[Do not prompt when removing working directory files.]"
  {-d,--with-deps}"[Fetch cache for all dependencies of the specified target.]"
  {-R,--recursive}"[Pull cache for subdirectories of the specified directory.]"
  "--run-cache[Fetch run history for all stages.]"
  "*:Limit command scope to these tracked files\/directories, .dvc files, or stage names.:_files -g '(*?.dvc|Dvcfile|dvc.yaml)'"
)

_shtab_dvc_push=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-j,--jobs}"[Number of jobs to run simultaneously. The default value is 4 \* cpu_count(). For SSH remotes, the default is 4. ]:jobs:"
  {-r,--remote}"[Remote storage to push to]:remote:"
  {-a,--all-branches}"[Push cache for all branches.]"
  {-T,--all-tags}"[Push cache for all tags.]"
  "--all-commits[Push cache for all commits.]"
  {-d,--with-deps}"[Push cache for all dependencies of the specified target.]"
  {-R,--recursive}"[Push cache for subdirectories of specified directory.]"
  "--run-cache[Push run history for all stages.]"
  "*:Limit command scope to these tracked files\/directories, .dvc files, or stage names.:_files -g '(*?.dvc|Dvcfile|dvc.yaml)'"
)

_shtab_dvc_remote=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "1:Sub command:(add default modify list remove rename)"
)

_shtab_dvc_remove=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--outs[Remove outputs as well.]"
  "*:DVC-files to remove.:_files -g '(*?.dvc|Dvcfile|dvc.yaml)'"
)

_shtab_dvc_repro=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-f,--force}"[Reproduce even if dependencies were not changed.]"
  {-s,--single-item}"[Reproduce only single data item without recursive dependencies check.]"
  {-c,--cwd}"[Directory within your repo to reproduce from.]:cwd:"
  {-m,--metrics}"[Show metrics after reproduction.]"
  "--dry[Only print the commands that would be executed without actually executing.]"
  {-i,--interactive}"[Ask for confirmation before reproducing each stage.]"
  {-p,--pipeline}"[Reproduce the whole pipeline that the specified stage file belongs to.]"
  {-P,--all-pipelines}"[Reproduce all pipelines in the repo.]"
  {-R,--recursive}"[Reproduce all stages in the specified directory.]"
  "--no-run-cache[Execute stage commands even if they have already been run with the same command\/dependencies\/outputs\/etc before.]"
  "--force-downstream[Reproduce all descendants of a changed stage even if their direct dependencies didn\'t change.]"
  "--no-commit[Don\'t put files\/directories into cache.]"
  "--downstream[Start from the specified stages when reproducing pipelines.]"
  "*:Stages to reproduce. \'dvc.yaml\' by default.:_files -g '(*?.dvc|Dvcfile|dvc.yaml)'"
)

_shtab_dvc_root=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
)

_shtab_dvc_run=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "*"{-d,--deps}"[Declare dependencies for reproducible cmd.]:deps:"
  {-n,--name}"[Stage name.]:name:"
  "*"{-o,--outs}"[Declare output file or directory.]:outs:"
  "*"{-O,--outs-no-cache}"[Declare output file or directory (do not put into DVC cache).]:outs_no_cache:"
  "*"{-p,--params}"[Declare parameter to use as additional dependency.]:params:"
  "*"{-m,--metrics}"[Declare output metric file.]:metrics:"
  "*"{-M,--metrics-no-cache}"[Declare output metric file (do not put into DVC cache).]:metrics_no_cache:"
  "*--plots[Declare output plot file.]:plots:"
  "*--plots-no-cache[Declare output plot file (do not put into DVC cache).]:plots_no_cache:"
  {-w,--wdir}"[Directory within your repo to run your command in.]:wdir:"
  "--no-exec[Only create stage file without actually running it.]"
  {-f,--force}"[Overwrite existing stage]"
  "--no-run-cache[Execute the command even if this stage has already been run with the same command\/dependencies\/outputs\/etc before.]"
  "--no-commit[Don\'t put files\/directories into cache.]"
  "*--outs-persist[Declare output file or directory that will not be removed upon repro.]:outs_persist:"
  "*--outs-persist-no-cache[Declare output file or directory that will not be removed upon repro (do not put into DVC cache).]:outs_persist_no_cache:"
  "--always-changed[Always consider this DVC-file as changed.]"
  "--external[Allow outputs that are outside of the DVC repository.]"
  ":Command to execute.:"
)

_shtab_dvc_status=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-v,--verbose}"[Be verbose.]"
  {-j,--jobs}"[Number of jobs to run simultaneously. The default value is 4 \* cpu_count(). For SSH remotes, the default is 4. ]:jobs:"
  {-q,--quiet}"[Suppresses all output. Exit with 0 if pipelines are up to date, otherwise 1.]"
  {-c,--cloud}"[Show status of a local cache compared to a remote repository.]"
  {-r,--remote}"[Remote storage to compare local cache to]:remote:"
  {-a,--all-branches}"[Show status of a local cache compared to a remote repository for all branches.]"
  {-T,--all-tags}"[Show status of a local cache compared to a remote repository for all tags.]"
  "--all-commits[Show status of a local cache compared to a remote repository for all commits.]"
  {-d,--with-deps}"[Show status for all dependencies of the specified target.]"
  {-R,--recursive}"[Show status of all stages in the specified directory.]"
  "--show-json[Show status in JSON format.]"
  "*:Limit command scope to these tracked files\/directories, .dvc files, or stage names.:_files -g '(*?.dvc|Dvcfile|dvc.yaml)'"
)

_shtab_dvc_unfreeze=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "*:Stages or .dvc files to unfreeze:_files -g '(*?.dvc|Dvcfile|dvc.yaml)'"
)

_shtab_dvc_unprotect=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "*:Data files\/directories to unprotect.:_files"
)

_shtab_dvc_update=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
  "--rev[Git revision (e.g. SHA, branch, tag)]:rev:"
  {-R,--recursive}"[Update all stages in the specified directory.]"
  "*:DVC-files to update.:_files -g '(*?.dvc|Dvcfile|dvc.yaml)'"
)

_shtab_dvc_version=(
  "(- :)"{-h,--help}"[show this help message and exit]"
  "*"{-q,--quiet}"[Be quiet.]"
  "*"{-v,--verbose}"[Be verbose.]"
)

typeset -A opt_args
local context state line curcontext="$curcontext"

_arguments \
  $_shtab_dvc_options_ \
   \
  ': :_shtab_dvc_commands_' \
  '*::args:->args'

case $words[1] in
  add) _arguments $_shtab_dvc_add ;;
  cache) _arguments $_shtab_dvc_cache ;;
  check-ignore) _arguments $_shtab_dvc_check_ignore ;;
  checkout) _arguments $_shtab_dvc_checkout ;;
  commit) _arguments $_shtab_dvc_commit ;;
  completion) _arguments $_shtab_dvc_completion ;;
  config) _arguments $_shtab_dvc_config ;;
  dag) _arguments $_shtab_dvc_dag ;;
  destroy) _arguments $_shtab_dvc_destroy ;;
  diff) _arguments $_shtab_dvc_diff ;;
  exp) _arguments $_shtab_dvc_exp ;;
  experiments) _arguments $_shtab_dvc_experiments ;;
  fetch) _arguments $_shtab_dvc_fetch ;;
  freeze) _arguments $_shtab_dvc_freeze ;;
  gc) _arguments $_shtab_dvc_gc ;;
  get) _arguments $_shtab_dvc_get ;;
  get-url) _arguments $_shtab_dvc_get_url ;;
  import) _arguments $_shtab_dvc_import ;;
  import-url) _arguments $_shtab_dvc_import_url ;;
  init) _arguments $_shtab_dvc_init ;;
  install) _arguments $_shtab_dvc_install ;;
  list) _arguments $_shtab_dvc_list ;;
  metrics) _arguments $_shtab_dvc_metrics ;;
  move) _arguments $_shtab_dvc_move ;;
  params) _arguments $_shtab_dvc_params ;;
  plots) _arguments $_shtab_dvc_plots ;;
  pull) _arguments $_shtab_dvc_pull ;;
  push) _arguments $_shtab_dvc_push ;;
  remote) _arguments $_shtab_dvc_remote ;;
  remove) _arguments $_shtab_dvc_remove ;;
  repro) _arguments $_shtab_dvc_repro ;;
  root) _arguments $_shtab_dvc_root ;;
  run) _arguments $_shtab_dvc_run ;;
  status) _arguments $_shtab_dvc_status ;;
  unfreeze) _arguments $_shtab_dvc_unfreeze ;;
  unprotect) _arguments $_shtab_dvc_unprotect ;;
  update) _arguments $_shtab_dvc_update ;;
  version) _arguments $_shtab_dvc_version ;;
esac
